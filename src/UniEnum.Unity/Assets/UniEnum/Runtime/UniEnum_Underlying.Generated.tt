<#@ template language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
var types = new [] {
    new TypeInfo(typeof(sbyte), false),
    new TypeInfo(typeof(byte), false),
    new TypeInfo(typeof(short), false),
    new TypeInfo(typeof(ushort), false),
    new TypeInfo(typeof(int), true),
    new TypeInfo(typeof(uint), false),
    new TypeInfo(typeof(long), false),
    new TypeInfo(typeof(ulong), false),
};

#>
// <auto-generated>
// This file generated from UniEnum.
// </auto-generated>
using System;
using System.Runtime.CompilerServices;

namespace UniEnumUtils
{
    public partial class UniEnum
    {
        #region 'IsDefined' methods for each UnderlyingTypes

<# foreach (var type in types) {#>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool IsDefined<T>(<#= type.TypeName #> value) where T : unmanaged, Enum
        {
            if (UnderlyingTypeInfo<T>.UnderlyingTypeCode == TypeCode.<#= type.TypeCode #>)
                return <#= type.ToUnderlyingOpeClassName #><T>.Operation.IsDefined(value);
            throw new NotSupportedException($"{typeof(T).Name} and <#= type.TypeName #> comparing not supported");
        }

<# } #>
        #endregion
    }

<# foreach (var type in types) { #>
    #region <#= type.ToUnderlyingOpeClassName #>

    internal sealed class <#= type.ToUnderlyingOpeClassName #><T> where T : unmanaged, Enum
    {
        public static readonly bool IsContinuous;

        public static readonly <#= type.TypeName #> MinValue; 
        public static readonly <#= type.TypeName #> MaxValue;

        public static Base Operation;

        static <#=type.ToUnderlyingOpeClassName #>()
        {
            (MinValue, MaxValue, IsContinuous) = CheckValues();
            Operation = IsContinuous ? (Base) new Continuous() : new Discontinuous();
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        private static (<#= type.TypeName #> min, <#= type.TypeName #> max, bool isContinuous) CheckValues()
        {
            bool continuous = true;
            var values = ValueCache<T>.Values;
            var defaultValue = values.Length > 0 ? values[0] : default(T);
            <#= type.TypeName #> min, max, previous;
            min = max = previous = Unsafe.As<T, <#= type.TypeName #>>(defaultValue);
            for (int i = 0; i < values.Length; i++)
            {
                var v = Unsafe.As<T, <#= type.TypeName #>>(values[i]);

                if (i != 0 && previous != v - 1)
                    continuous = false;  

                if (v < min) min = v;
                if (v > max) max = v;

                previous = v;
            }
            return (min, max, continuous);
        }

        internal abstract class Base : IUnderlyingOperation<T>
        {
            public bool TryParse(string text, out T result)
            {
                if (<#= type.TypeName #>.TryParse(text, out var v))
                {
                    result = Unsafe.As<<#= type.TypeName #>, T>(v);
                    return true;
                }
                result = default;
                return false;
            }
        
            public T GetMinValue() => Unsafe.As<<#= type.TypeName #>, T>(MinValue);

            public T GetMaxValue() => Unsafe.As<<#= type.TypeName #>, T>(MaxValue);

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool IsDefined(T value)
            {
                return IsDefined(Unsafe.As<T, <#= type.TypeName #>>(value));
            }
            
            public abstract string GetName(T value);

            public abstract bool IsDefined(<#= type.TypeName #> value);
        }

        private sealed class Continuous : Base
        {
            private static ValueInfo<T>[] _valueInfos;

            static Continuous()
            {
                _valueInfos = ValueInfoCache<T>.ValueInfos;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public bool TryGetValueInfo(T value, out ValueInfo<T> result)
            {
                var v = Unsafe.As<T, <#= type.TypeName #>>(value);
                var index = (uint)(v - MinValue);
                if (index < _valueInfos.Length)
                {   
                    result = _valueInfos[index];
                    return true;
                }

                result = default;
                return false;
            }

            public override string GetName(T value)
            {
                if (TryGetValueInfo(value, out var info))
                    return info.Name;

                return null;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override bool IsDefined(<#= type.TypeName #> value)
            {
                return MinValue <= value && value <= MaxValue;
            }
        }

        private sealed class Discontinuous : Base
        {
     　　　　　private readonly <#= type.HashTableClass #> _hashTable;

            public Discontinuous() 
            {
                _hashTable = new <#= type.HashTableClass #>(
                    ValueInfoCache<T>.ValueInfos,
                    (in ValueInfo<T> info) => Unsafe.As<T, <#= type.TypeName #>>(info.EnumValue));
            }

            public override string GetName(T value)
            {
                var v = Unsafe.As<T, <#= type.TypeName #>>(value);
                if (_hashTable.TryGetValue(v, out var info))
                    return info.Name;

                return null;
            }

            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            public override bool IsDefined(<#= type.TypeName #> value)
            {
                return _hashTable.TryGetValue(value, out var _);
            }
        }

    }

    #endregion

<# } #>

}

<#+

    class TypeInfo
    {
        public readonly Type Type;
        public readonly bool IsSpecialized;
        public readonly string TypeName;
        public readonly TypeCode TypeCode;
        public readonly string Title;
        public readonly string EnumType;
        public readonly string HashTableClass;
        
        static readonly Dictionary<Type, string> TypeConvertMap = new Dictionary<Type, string>()
        {
            {typeof(sbyte), "sbyte"},
            {typeof(byte), "byte"},
            {typeof(short), "short"},
            {typeof(ushort), "ushort"},
            {typeof(int), "int"},
            {typeof(uint), "uint"},
            {typeof(long), "long"},
            {typeof(ulong), "ulong"},
        };

        public TypeInfo(Type type, bool isSpecialized)
        {
            Type = type;
            IsSpecialized = isSpecialized;
            TypeName = TypeConvertMap[Type];
            TypeCode = Type.GetTypeCode(type);
            Title = $"{Char.ToUpperInvariant(TypeName[0])}{TypeName.Substring(1)}";
            EnumType = $"{Title}Enum";
            HashTableClass = CreateHashTableClass();
        }


        public string ToUnderlyingOpeClassName
            => $"{Type.Name}Enum";

        private string CreateHashTableClass()
        {
            if (IsSpecialized)
                return $"{Type.Name}HashTable<ValueInfo<T>>";
            return $"HashTable<{TypeName}, ValueInfo<T>>";
        }         

        public override string ToString()
        {
            return TypeName;
        }
    }
#>