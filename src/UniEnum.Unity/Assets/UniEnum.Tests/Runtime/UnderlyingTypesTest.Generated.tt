<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
    var typeInfos = newã€€[]
    {
        new TypeInfo("sbyte", false, 1, 1),
        new TypeInfo("byte", true, 1, 1),
        new TypeInfo("short", false, 1, 1),
        new TypeInfo("ushort", true, 1, 1),
        new TypeInfo("int", false, 1, 1),
        new TypeInfo("int", false, 1, 2),
        new TypeInfo("uint", true, 1, 1),
        new TypeInfo("long", false, 1, 1),
        new TypeInfo("ulong", true, 1, 1),
    };
#>
using System;
using NUnit.Framework;
using UniEnumUtils;

namespace UniEnumTests
{
<# foreach (var type in typeInfos) { #>
    public enum <#= type.EnumType #> : <#= type.TypeName #>
    {
<#
        var range = Enumerable.Range(type.Start, 32);
        var types = string.Join(", ", range.Select(v => $"{type.GetName(v)} = {type.GetValue(v)}"));
#>
        <#= types #>
    }

    public class <#= type.EnumType #>Test
    {
        [Test]
        public void <#= type.EnumType #>_MinMaxTest()
        {
            Assert.AreEqual(<#= type.GetFullName(1) #>, UniEnum.GetMinValue<<#= type.EnumType #>>());
            Assert.AreEqual(<#= type.GetFullName(32) #>, UniEnum.GetMaxValue<<#= type.EnumType #>>());
        }


        [Test]
        public void <#= type.EnumType #>_GetNameTest()
        {
            Assert.AreEqual("<#= type.GetName(1) #>", UniEnum.GetName<<#= type.EnumType #>>(<#= type.GetFullName(1) #>));
            Assert.AreEqual("<#= type.GetName(2) #>", UniEnum.GetName<<#= type.EnumType #>>(<#= type.GetFullName(2) #>));
            Assert.AreEqual("<#= type.GetName(32) #>", UniEnum.GetName<<#= type.EnumType #>>(<#= type.GetFullName(32) #>));

            var typeNotFound = (<#= type.EnumType #>)Enum.ToObject(typeof(<#= type.EnumType #>), 99999); 
            Assert.AreEqual(null, UniEnum.GetName<<#= type.EnumType #>>(typeNotFound));
        }

        [Test]
        public void <#= type.EnumType #>_IsDefineTest()
        {
            Assert.AreEqual(true, UniEnum.IsDefined<<#= type.EnumType #>>((<#= type #>)<#= type.GetValue(1) #>));
            Assert.AreEqual(true, UniEnum.IsDefined<<#= type.EnumType #>>((<#= type #>)<#= type.GetValue(2) #>));
            <#= type.IsSignOnly ? "//" : "" #>Assert.AreEqual(false, UniEnum.IsDefined<<#= type.EnumType #>>((<#= type #>)-1));
            Assert.AreEqual(false, UniEnum.IsDefined<<#= type.EnumType #>>((<#= type #>)<#= type.GetValue(33) #>));

            var type1 = (<#= type.EnumType #>)Enum.ToObject(typeof(<#= type.EnumType #>), <#= type.GetValue(1) #>);
            var unknown = (<#= type.EnumType #>)Enum.ToObject(typeof(<#= type.EnumType #>), -1);
            Assert.AreEqual(true, UniEnum.IsDefined(type1));
            Assert.AreEqual(false, UniEnum.IsDefined(unknown));
            
            Assert.AreEqual(true, UniEnum.IsDefined<<#= type.EnumType #>>(<#= type.EnumType #>.Type1 | <#= type.EnumType #>.Type2));            
        }

        [Test] 
        public void <#= type.EnumType #>_TryParseTest() 
        {
            <#= type.EnumType #> value;
            bool result;
            
            result = UniEnum.TryParse("<#= type.GetValue(1) #>", out value);
            Assert.AreEqual(true, result);
            Assert.AreEqual(<#= type.EnumType #>.Type1, value);

            result = UniEnum.TryParse("+<#= type.GetValue(1) #>", out value);
            Assert.AreEqual(true, result);
            Assert.AreEqual(<#= type.EnumType #>.Type1, value);

            result = UniEnum.TryParse("<#= type.GetValue(2) #>", out value);
            Assert.AreEqual(true, result);
            Assert.AreEqual(<#= type.EnumType #>.Type2, value);

            result = UniEnum.TryParse("-1", out value);
            Assert.AreEqual(<#= type.IsSignOnly ? "false" : "true" #>, result);

            
            result = UniEnum.TryParse("type1", out value);
            Assert.AreEqual(false, result);

            result = UniEnum.TryParse("type1", true, out value);
            Assert.AreEqual(true, result);
            Assert.AreEqual(<#= type.EnumType #>.Type1, value);

            result = UniEnum.TryParse("Type1", out value);
            Assert.AreEqual(true, result);
            Assert.AreEqual(<#= type.EnumType #>.Type1, value);
            
            result = UniEnum.TryParse("Type1", false, out value);
            Assert.AreEqual(true, result);
            Assert.AreEqual(<#= type.EnumType #>.Type1, value);
            
            result = UniEnum.TryParse("type0", out value);
            Assert.AreEqual(false, result);

        }
    }

<# } #>
}

<#+
    class TypeInfo
    {
        public readonly string TypeName;
        public readonly string Title;
        public readonly string EnumType;
        public readonly bool IsSignOnly;
        public readonly int Start;
        public readonly int Step;
    
        public TypeInfo(string typeName, bool isSignOnly, int start, int step)
        {
            TypeName = typeName;
            Start = start;
            Step = step;
            Title = $"{Char.ToUpperInvariant(typeName[0])}{typeName.Substring(1)}" + (step == 1 ? string.Empty : step.ToString());
            EnumType = $"{Title}Enum_S{start}_{step}";
            IsSignOnly = isSignOnly;
        }

        public string GetName(int id) => $"Type{id}";

        public string GetFullName(int id) => $"{EnumType}.{GetName(id)}";
        
        public int GetValue(int id) => Start + (id - 1) * Step;

        public override string ToString()
        {
            return TypeName;
        }
    }
#>